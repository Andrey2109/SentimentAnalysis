Index: src/main/java/com/handson/sentiment/kafka/AppKafkaSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/handson/sentiment/kafka/AppKafkaSender.java b/src/main/java/com/handson/sentiment/kafka/AppKafkaSender.java
new file mode 100644
--- /dev/null	(date 1645137334477)
+++ b/src/main/java/com/handson/sentiment/kafka/AppKafkaSender.java	(date 1645137334477)
@@ -0,0 +1,31 @@
+package com.handson.sentiment.kafka;
+
+import org.apache.kafka.clients.producer.ProducerRecord;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.stereotype.Component;
+import reactor.core.publisher.Flux;
+import reactor.core.publisher.Mono;
+import reactor.kafka.sender.KafkaSender;
+import reactor.kafka.sender.SenderRecord;
+import reactor.kafka.sender.SenderResult;
+
+import java.util.UUID;
+
+@Component
+public class AppKafkaSender {
+
+    @Autowired
+    @Qualifier("simpleProducer")
+    private KafkaSender<String, String> kafkaSender;
+
+    public boolean send(String msg, String topic) {
+        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, null, UUID.randomUUID().toString(),
+                msg);
+        Mono<SenderRecord<String, String, String>> mono = Mono.just(SenderRecord.create(record, null));
+        Flux<SenderResult<String>> res =  kafkaSender.send(mono);
+        res.collectList().subscribe();
+
+        return  true;
+    }
+}
